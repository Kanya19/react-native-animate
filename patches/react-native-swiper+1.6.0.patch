diff --git a/node_modules/react-native-swiper/src/index.js b/node_modules/react-native-swiper/src/index.js
index 3e63ca7..ea119c9 100644
--- a/node_modules/react-native-swiper/src/index.js
+++ b/node_modules/react-native-swiper/src/index.js
@@ -2,7 +2,7 @@
  * react-native-swiper
  * @author leecade<leecade@163.com>
  */
-import React, { Component } from 'react'
+import React, {Component} from 'react'
 import PropTypes from 'prop-types'
 import {
   Text,
@@ -226,11 +226,11 @@ export default class extends Component {
       this.autoplay()
     }
     if (this.props.children !== prevProps.children) {
-      if (this.props.loadMinimal && Platform.OS === 'ios') {
-        this.setState({ ...this.props, index: this.state.index })
+      if (this.props.loadMinimal) {
+        this.setState({...this.props, index: this.state.index})
       } else {
         this.setState(
-          this.initState({ ...this.props, index: this.state.index }, true)
+          this.initState({...this.props, index: this.state.index}, true)
         )
       }
     }
@@ -238,7 +238,7 @@ export default class extends Component {
 
   initState(props, updateIndex = false) {
     // set the current state
-    const state = this.state || { width: 0, height: 0, offset: { x: 0, y: 0 } }
+    const state = this.state || {width: 0, height: 0, offset: {x: 0, y: 0}}
 
     const initState = {
       autoplayEnd: false,
@@ -263,7 +263,7 @@ export default class extends Component {
     }
 
     // Default: horizontal
-    const { width, height } = Dimensions.get('window')
+    const {width, height} = Dimensions.get('window')
 
     initState.dir = props.horizontal === false ? 'y' : 'x'
 
@@ -299,9 +299,9 @@ export default class extends Component {
   }
 
   onLayout = event => {
-    const { width, height } = event.nativeEvent.layout
-    const offset = (this.internals.offset = {})
-    const state = { width, height }
+    const {width, height} = event.nativeEvent.layout
+    const offset = (this.internals.offset = {x: 0, y: 0})
+    const state = {width, height}
 
     if (this.state.total > 1) {
       let setup = this.state.index
@@ -322,7 +322,7 @@ export default class extends Component {
     // contentOffset is not working in react 0.48.x so we need to use scrollTo
     // to emulate offset.
     if (this.initialRender && this.state.total > 1) {
-      this.scrollView.scrollTo({ ...offset, animated: false })
+      this.scrollView.scrollTo({...offset, animated: false})
       this.initialRender = false
     }
 
@@ -341,21 +341,21 @@ export default class extends Component {
           if (this.state.index === 0) {
             scrollView.scrollTo(
               this.props.horizontal === false
-                ? { x: 0, y: this.state.height, animated: false }
-                : { x: this.state.width, y: 0, animated: false }
+                ? {x: 0, y: this.state.height, animated: false}
+                : {x: this.state.width, y: 0, animated: false}
             )
           } else if (this.state.index === this.state.total - 1) {
             this.props.horizontal === false
               ? this.scrollView.scrollTo({
-                  x: 0,
-                  y: this.state.height * this.state.total,
-                  animated: false
-                })
+                x: 0,
+                y: this.state.height * this.state.total,
+                animated: false
+              })
               : this.scrollView.scrollTo({
-                  x: this.state.width * this.state.total,
-                  y: 0,
-                  animated: false
-                })
+                x: this.state.width * this.state.total,
+                y: 0,
+                animated: false
+              })
           }
         }
       },
@@ -385,7 +385,7 @@ export default class extends Component {
           ? this.state.index === this.state.total - 1
           : this.state.index === 0)
       )
-        return this.setState({ autoplayEnd: true })
+        return this.setState({autoplayEnd: true})
 
       this.scrollBy(this.props.autoplayDirection ? 1 : -1)
     }, this.props.autoplayTimeout * 1000)
@@ -399,7 +399,7 @@ export default class extends Component {
     // update scroll state
     this.internals.isScrolling = true
     this.props.onScrollBeginDrag &&
-      this.props.onScrollBeginDrag(e, this.fullState(), this)
+    this.props.onScrollBeginDrag(e, this.fullState(), this)
   }
 
   /**
@@ -429,7 +429,7 @@ export default class extends Component {
     })
     // if `onMomentumScrollEnd` registered will be called here
     this.props.onMomentumScrollEnd &&
-      this.props.onMomentumScrollEnd(e, this.fullState(), this)
+    this.props.onMomentumScrollEnd(e, this.fullState(), this)
   }
 
   /*
@@ -437,10 +437,10 @@ export default class extends Component {
    * @param {object} e native event
    */
   onScrollEndDrag = e => {
-    const { contentOffset } = e.nativeEvent
-    const { horizontal } = this.props
-    const { children, index } = this.state
-    const { offset } = this.internals
+    const {contentOffset} = e.nativeEvent
+    const {horizontal} = this.props
+    const {children, index} = this.state
+    const {offset} = this.internals
     const previousOffset = horizontal ? offset.x : offset.y
     const newOffset = horizontal ? contentOffset.x : contentOffset.y
 
@@ -502,10 +502,10 @@ export default class extends Component {
       // so we increment it by 1 then immediately set it to what it should be,
       // after render.
       if (offset[dir] === this.internals.offset[dir]) {
-        newState.offset = { x: 0, y: 0 }
+        newState.offset = {x: 0, y: 0}
         newState.offset[dir] = offset[dir] + 1
         this.setState(newState, () => {
-          this.setState({ offset: offset }, cb)
+          this.setState({offset: offset}, cb)
         })
       } else {
         newState.offset = offset
@@ -531,7 +531,7 @@ export default class extends Component {
     if (state.dir === 'x') x = diff * state.width
     if (state.dir === 'y') y = diff * state.height
 
-    this.scrollView && this.scrollView.scrollTo({ x, y, animated })
+    this.scrollView && this.scrollView.scrollTo({x, y, animated})
 
     // update scroll state
     this.internals.isScrolling = true
@@ -573,7 +573,7 @@ export default class extends Component {
     if (state.dir === 'x') x = diff * state.width
     if (state.dir === 'y') y = diff * state.height
 
-    this.scrollView && this.scrollView.scrollTo({ x, y, animated })
+    this.scrollView && this.scrollView.scrollTo({x, y, animated})
 
     // update scroll state
     this.internals.isScrolling = true
@@ -669,8 +669,8 @@ export default class extends Component {
     for (let i = 0; i < this.state.total; i++) {
       dots.push(
         i === this.state.index
-          ? React.cloneElement(ActiveDot, { key: i })
-          : React.cloneElement(Dot, { key: i })
+          ? React.cloneElement(ActiveDot, {key: i})
+          : React.cloneElement(Dot, {key: i})
       )
     }
 
@@ -788,7 +788,7 @@ export default class extends Component {
    * @return {object} react-dom
    */
   render() {
-    const { index, total, width, height, children } = this.state
+    const {index, total, width, height, children} = this.state
     const {
       containerStyle,
       loop,
@@ -804,7 +804,7 @@ export default class extends Component {
     const loopVal = loop ? 1 : 0
     let pages = []
 
-    const pageStyle = [{ width: width, height: height }, styles.slide]
+    const pageStyle = [{width: width, height: height}, styles.slide]
     const pageStyleLoading = {
       width,
       height,
@@ -840,7 +840,7 @@ export default class extends Component {
           } else {
             return (
               <View style={pageStyleLoading} key={i}>
-                {loadMinimalLoader ? loadMinimalLoader : <ActivityIndicator />}
+                {loadMinimalLoader ? loadMinimalLoader : <ActivityIndicator/>}
               </View>
             )
           }
@@ -864,9 +864,9 @@ export default class extends Component {
       <View style={[styles.container, containerStyle]} onLayout={this.onLayout}>
         {this.renderScrollView(pages)}
         {showsPagination &&
-          (renderPagination
-            ? renderPagination(index, total, this)
-            : this.renderPagination())}
+        (renderPagination
+          ? renderPagination(index, total, this)
+          : this.renderPagination())}
         {this.renderTitle()}
         {showsButtons && this.renderButtons()}
       </View>
